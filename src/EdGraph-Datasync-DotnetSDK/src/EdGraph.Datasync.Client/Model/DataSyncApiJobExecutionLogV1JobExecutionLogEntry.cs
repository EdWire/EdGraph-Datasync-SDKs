/*
 * DataSync Api
 *
 * DataSync Api - v1.0
 *
 * The version of the OpenAPI document: v1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EdGraph.Datasync.Client.Client.OpenAPIDateConverter;

namespace EdGraph.Datasync.Client.Model
{
    /// <summary>
    /// DataSyncApiJobExecutionLogV1JobExecutionLogEntry
    /// </summary>
    [DataContract(Name = "DataSyncApi.JobExecutionLog.V1.JobExecutionLogEntry")]
    public partial class DataSyncApiJobExecutionLogV1JobExecutionLogEntry : IEquatable<DataSyncApiJobExecutionLogV1JobExecutionLogEntry>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets MessageType
        /// </summary>
        [DataMember(Name = "messageType", EmitDefaultValue = false)]
        public DataSyncApiJobExecutionLogV1MessageType? MessageType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="DataSyncApiJobExecutionLogV1JobExecutionLogEntry" /> class.
        /// </summary>
        /// <param name="tenantId">tenantId.</param>
        /// <param name="jobId">jobId.</param>
        /// <param name="jobExecutionId">jobExecutionId.</param>
        /// <param name="message">message.</param>
        /// <param name="messageType">messageType.</param>
        /// <param name="loggedDateTime">loggedDateTime.</param>
        /// <param name="errorCode">errorCode.</param>
        public DataSyncApiJobExecutionLogV1JobExecutionLogEntry(string tenantId = default(string), string jobId = default(string), string jobExecutionId = default(string), string message = default(string), DataSyncApiJobExecutionLogV1MessageType? messageType = default(DataSyncApiJobExecutionLogV1MessageType?), string loggedDateTime = default(string), string errorCode = default(string))
        {
            this.TenantId = tenantId;
            this.JobId = jobId;
            this.JobExecutionId = jobExecutionId;
            this.Message = message;
            this.MessageType = messageType;
            this.LoggedDateTime = loggedDateTime;
            this.ErrorCode = errorCode;
        }

        /// <summary>
        /// Gets or Sets TenantId
        /// </summary>
        [DataMember(Name = "tenantId", EmitDefaultValue = true)]
        public string TenantId { get; set; }

        /// <summary>
        /// Gets or Sets JobId
        /// </summary>
        [DataMember(Name = "jobId", EmitDefaultValue = true)]
        public string JobId { get; set; }

        /// <summary>
        /// Gets or Sets JobExecutionId
        /// </summary>
        [DataMember(Name = "jobExecutionId", EmitDefaultValue = true)]
        public string JobExecutionId { get; set; }

        /// <summary>
        /// Gets or Sets Message
        /// </summary>
        [DataMember(Name = "message", EmitDefaultValue = true)]
        public string Message { get; set; }

        /// <summary>
        /// Gets or Sets LoggedDateTime
        /// </summary>
        [DataMember(Name = "loggedDateTime", EmitDefaultValue = true)]
        public string LoggedDateTime { get; set; }

        /// <summary>
        /// Gets or Sets ErrorCode
        /// </summary>
        [DataMember(Name = "errorCode", EmitDefaultValue = true)]
        public string ErrorCode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DataSyncApiJobExecutionLogV1JobExecutionLogEntry {\n");
            sb.Append("  TenantId: ").Append(TenantId).Append("\n");
            sb.Append("  JobId: ").Append(JobId).Append("\n");
            sb.Append("  JobExecutionId: ").Append(JobExecutionId).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  MessageType: ").Append(MessageType).Append("\n");
            sb.Append("  LoggedDateTime: ").Append(LoggedDateTime).Append("\n");
            sb.Append("  ErrorCode: ").Append(ErrorCode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DataSyncApiJobExecutionLogV1JobExecutionLogEntry);
        }

        /// <summary>
        /// Returns true if DataSyncApiJobExecutionLogV1JobExecutionLogEntry instances are equal
        /// </summary>
        /// <param name="input">Instance of DataSyncApiJobExecutionLogV1JobExecutionLogEntry to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DataSyncApiJobExecutionLogV1JobExecutionLogEntry input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.TenantId == input.TenantId ||
                    (this.TenantId != null &&
                    this.TenantId.Equals(input.TenantId))
                ) && 
                (
                    this.JobId == input.JobId ||
                    (this.JobId != null &&
                    this.JobId.Equals(input.JobId))
                ) && 
                (
                    this.JobExecutionId == input.JobExecutionId ||
                    (this.JobExecutionId != null &&
                    this.JobExecutionId.Equals(input.JobExecutionId))
                ) && 
                (
                    this.Message == input.Message ||
                    (this.Message != null &&
                    this.Message.Equals(input.Message))
                ) && 
                (
                    this.MessageType == input.MessageType ||
                    this.MessageType.Equals(input.MessageType)
                ) && 
                (
                    this.LoggedDateTime == input.LoggedDateTime ||
                    (this.LoggedDateTime != null &&
                    this.LoggedDateTime.Equals(input.LoggedDateTime))
                ) && 
                (
                    this.ErrorCode == input.ErrorCode ||
                    (this.ErrorCode != null &&
                    this.ErrorCode.Equals(input.ErrorCode))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TenantId != null)
                {
                    hashCode = (hashCode * 59) + this.TenantId.GetHashCode();
                }
                if (this.JobId != null)
                {
                    hashCode = (hashCode * 59) + this.JobId.GetHashCode();
                }
                if (this.JobExecutionId != null)
                {
                    hashCode = (hashCode * 59) + this.JobExecutionId.GetHashCode();
                }
                if (this.Message != null)
                {
                    hashCode = (hashCode * 59) + this.Message.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.MessageType.GetHashCode();
                if (this.LoggedDateTime != null)
                {
                    hashCode = (hashCode * 59) + this.LoggedDateTime.GetHashCode();
                }
                if (this.ErrorCode != null)
                {
                    hashCode = (hashCode * 59) + this.ErrorCode.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
