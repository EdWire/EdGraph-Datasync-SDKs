/*
 * DataSync Api
 *
 * DataSync Api - v1.0
 *
 * The version of the OpenAPI document: v1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using EdGraph.Datasync.Client.Client;
using EdGraph.Datasync.Client.Client.Auth;
using EdGraph.Datasync.Client.Model;

namespace EdGraph.Datasync.Client.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IJobsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Activate a DataSync job matching the primary key
        /// </summary>
        /// <exception cref="EdGraph.Datasync.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="jobId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="dataSyncApiJobV1ActivateJobRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ActivateTenantDataSyncJob(string tenantId, string jobId, string? apiVersion = default(string?), string? xVersion = default(string?), DataSyncApiJobV1ActivateJobRequest? dataSyncApiJobV1ActivateJobRequest = default(DataSyncApiJobV1ActivateJobRequest?), int operationIndex = 0);

        /// <summary>
        /// Activate a DataSync job matching the primary key
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.Datasync.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="jobId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="dataSyncApiJobV1ActivateJobRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ActivateTenantDataSyncJobWithHttpInfo(string tenantId, string jobId, string? apiVersion = default(string?), string? xVersion = default(string?), DataSyncApiJobV1ActivateJobRequest? dataSyncApiJobV1ActivateJobRequest = default(DataSyncApiJobV1ActivateJobRequest?), int operationIndex = 0);
        /// <summary>
        /// Cancel a DataSync job matching the primary key
        /// </summary>
        /// <exception cref="EdGraph.Datasync.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="jobId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="dataSyncApiJobV1CancelJobRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void CancelTenantDataSyncJob(string tenantId, string jobId, string? apiVersion = default(string?), string? xVersion = default(string?), DataSyncApiJobV1CancelJobRequest? dataSyncApiJobV1CancelJobRequest = default(DataSyncApiJobV1CancelJobRequest?), int operationIndex = 0);

        /// <summary>
        /// Cancel a DataSync job matching the primary key
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.Datasync.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="jobId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="dataSyncApiJobV1CancelJobRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CancelTenantDataSyncJobWithHttpInfo(string tenantId, string jobId, string? apiVersion = default(string?), string? xVersion = default(string?), DataSyncApiJobV1CancelJobRequest? dataSyncApiJobV1CancelJobRequest = default(DataSyncApiJobV1CancelJobRequest?), int operationIndex = 0);
        /// <summary>
        /// Creates a new DataSync job
        /// </summary>
        /// <exception cref="EdGraph.Datasync.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="dataSyncApiJobV1CreateJobRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void CreateTenantDataSyncJob(string tenantId, string? apiVersion = default(string?), string? xVersion = default(string?), DataSyncApiJobV1CreateJobRequest? dataSyncApiJobV1CreateJobRequest = default(DataSyncApiJobV1CreateJobRequest?), int operationIndex = 0);

        /// <summary>
        /// Creates a new DataSync job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.Datasync.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="dataSyncApiJobV1CreateJobRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CreateTenantDataSyncJobWithHttpInfo(string tenantId, string? apiVersion = default(string?), string? xVersion = default(string?), DataSyncApiJobV1CreateJobRequest? dataSyncApiJobV1CreateJobRequest = default(DataSyncApiJobV1CreateJobRequest?), int operationIndex = 0);
        /// <summary>
        /// Deactivate a DataSync job matching the primary key
        /// </summary>
        /// <exception cref="EdGraph.Datasync.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="jobId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="dataSyncApiJobV1DeactivateJobRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeactivateTenantDataSyncJob(string tenantId, string jobId, string? apiVersion = default(string?), string? xVersion = default(string?), DataSyncApiJobV1DeactivateJobRequest? dataSyncApiJobV1DeactivateJobRequest = default(DataSyncApiJobV1DeactivateJobRequest?), int operationIndex = 0);

        /// <summary>
        /// Deactivate a DataSync job matching the primary key
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.Datasync.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="jobId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="dataSyncApiJobV1DeactivateJobRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeactivateTenantDataSyncJobWithHttpInfo(string tenantId, string jobId, string? apiVersion = default(string?), string? xVersion = default(string?), DataSyncApiJobV1DeactivateJobRequest? dataSyncApiJobV1DeactivateJobRequest = default(DataSyncApiJobV1DeactivateJobRequest?), int operationIndex = 0);
        /// <summary>
        /// Delete a DataSync job matching the primary key
        /// </summary>
        /// <exception cref="EdGraph.Datasync.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="jobId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="dataSyncApiJobV1DeleteJobRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeleteTenantDataSyncJob(string tenantId, string jobId, string? apiVersion = default(string?), string? xVersion = default(string?), DataSyncApiJobV1DeleteJobRequest? dataSyncApiJobV1DeleteJobRequest = default(DataSyncApiJobV1DeleteJobRequest?), int operationIndex = 0);

        /// <summary>
        /// Delete a DataSync job matching the primary key
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.Datasync.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="jobId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="dataSyncApiJobV1DeleteJobRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteTenantDataSyncJobWithHttpInfo(string tenantId, string jobId, string? apiVersion = default(string?), string? xVersion = default(string?), DataSyncApiJobV1DeleteJobRequest? dataSyncApiJobV1DeleteJobRequest = default(DataSyncApiJobV1DeleteJobRequest?), int operationIndex = 0);
        /// <summary>
        /// Execute a DataSync job matching the primary key
        /// </summary>
        /// <exception cref="EdGraph.Datasync.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="jobId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="dataSyncApiJobV1ExecuteJobRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ExecuteTenantDataSyncJob(string tenantId, string jobId, string? apiVersion = default(string?), string? xVersion = default(string?), DataSyncApiJobV1ExecuteJobRequest? dataSyncApiJobV1ExecuteJobRequest = default(DataSyncApiJobV1ExecuteJobRequest?), int operationIndex = 0);

        /// <summary>
        /// Execute a DataSync job matching the primary key
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.Datasync.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="jobId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="dataSyncApiJobV1ExecuteJobRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ExecuteTenantDataSyncJobWithHttpInfo(string tenantId, string jobId, string? apiVersion = default(string?), string? xVersion = default(string?), DataSyncApiJobV1ExecuteJobRequest? dataSyncApiJobV1ExecuteJobRequest = default(DataSyncApiJobV1ExecuteJobRequest?), int operationIndex = 0);
        /// <summary>
        /// Retrieves a list of DataSync Jobs
        /// </summary>
        /// <exception cref="EdGraph.Datasync.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="pageSize"> (optional, default to 10)</param>
        /// <param name="pageIndex"> (optional, default to 0)</param>
        /// <param name="orderBy"> (optional, default to &quot;&quot;)</param>
        /// <param name="filter"> (optional, default to &quot;&quot;)</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DataSyncApiJobV1JobListResponsePaginatedItemsViewModel</returns>
        DataSyncApiJobV1JobListResponsePaginatedItemsViewModel GetAllTenantDataSyncJobs(string tenantId, int? pageSize = default(int?), int? pageIndex = default(int?), string? orderBy = default(string?), string? filter = default(string?), string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0);

        /// <summary>
        /// Retrieves a list of DataSync Jobs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.Datasync.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="pageSize"> (optional, default to 10)</param>
        /// <param name="pageIndex"> (optional, default to 0)</param>
        /// <param name="orderBy"> (optional, default to &quot;&quot;)</param>
        /// <param name="filter"> (optional, default to &quot;&quot;)</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DataSyncApiJobV1JobListResponsePaginatedItemsViewModel</returns>
        ApiResponse<DataSyncApiJobV1JobListResponsePaginatedItemsViewModel> GetAllTenantDataSyncJobsWithHttpInfo(string tenantId, int? pageSize = default(int?), int? pageIndex = default(int?), string? orderBy = default(string?), string? filter = default(string?), string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0);
        /// <summary>
        /// Retrieves a specific DataSync job using its primary key
        /// </summary>
        /// <exception cref="EdGraph.Datasync.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="jobId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DataSyncApiJobV1JobProfileResponse</returns>
        DataSyncApiJobV1JobProfileResponse GetTenantDataSyncJobProfileById(string tenantId, string jobId, string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0);

        /// <summary>
        /// Retrieves a specific DataSync job using its primary key
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.Datasync.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="jobId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DataSyncApiJobV1JobProfileResponse</returns>
        ApiResponse<DataSyncApiJobV1JobProfileResponse> GetTenantDataSyncJobProfileByIdWithHttpInfo(string tenantId, string jobId, string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0);
        /// <summary>
        /// Updates a DataSync job matching the primary key
        /// </summary>
        /// <exception cref="EdGraph.Datasync.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="jobId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="dataSyncApiJobV1UpdateJobRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void UpdateTenantDataSyncJob(string tenantId, string jobId, string? apiVersion = default(string?), string? xVersion = default(string?), DataSyncApiJobV1UpdateJobRequest? dataSyncApiJobV1UpdateJobRequest = default(DataSyncApiJobV1UpdateJobRequest?), int operationIndex = 0);

        /// <summary>
        /// Updates a DataSync job matching the primary key
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.Datasync.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="jobId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="dataSyncApiJobV1UpdateJobRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateTenantDataSyncJobWithHttpInfo(string tenantId, string jobId, string? apiVersion = default(string?), string? xVersion = default(string?), DataSyncApiJobV1UpdateJobRequest? dataSyncApiJobV1UpdateJobRequest = default(DataSyncApiJobV1UpdateJobRequest?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IJobsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Activate a DataSync job matching the primary key
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.Datasync.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="jobId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="dataSyncApiJobV1ActivateJobRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ActivateTenantDataSyncJobAsync(string tenantId, string jobId, string? apiVersion = default(string?), string? xVersion = default(string?), DataSyncApiJobV1ActivateJobRequest? dataSyncApiJobV1ActivateJobRequest = default(DataSyncApiJobV1ActivateJobRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Activate a DataSync job matching the primary key
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.Datasync.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="jobId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="dataSyncApiJobV1ActivateJobRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ActivateTenantDataSyncJobWithHttpInfoAsync(string tenantId, string jobId, string? apiVersion = default(string?), string? xVersion = default(string?), DataSyncApiJobV1ActivateJobRequest? dataSyncApiJobV1ActivateJobRequest = default(DataSyncApiJobV1ActivateJobRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Cancel a DataSync job matching the primary key
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.Datasync.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="jobId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="dataSyncApiJobV1CancelJobRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CancelTenantDataSyncJobAsync(string tenantId, string jobId, string? apiVersion = default(string?), string? xVersion = default(string?), DataSyncApiJobV1CancelJobRequest? dataSyncApiJobV1CancelJobRequest = default(DataSyncApiJobV1CancelJobRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Cancel a DataSync job matching the primary key
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.Datasync.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="jobId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="dataSyncApiJobV1CancelJobRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CancelTenantDataSyncJobWithHttpInfoAsync(string tenantId, string jobId, string? apiVersion = default(string?), string? xVersion = default(string?), DataSyncApiJobV1CancelJobRequest? dataSyncApiJobV1CancelJobRequest = default(DataSyncApiJobV1CancelJobRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Creates a new DataSync job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.Datasync.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="dataSyncApiJobV1CreateJobRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CreateTenantDataSyncJobAsync(string tenantId, string? apiVersion = default(string?), string? xVersion = default(string?), DataSyncApiJobV1CreateJobRequest? dataSyncApiJobV1CreateJobRequest = default(DataSyncApiJobV1CreateJobRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Creates a new DataSync job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.Datasync.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="dataSyncApiJobV1CreateJobRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CreateTenantDataSyncJobWithHttpInfoAsync(string tenantId, string? apiVersion = default(string?), string? xVersion = default(string?), DataSyncApiJobV1CreateJobRequest? dataSyncApiJobV1CreateJobRequest = default(DataSyncApiJobV1CreateJobRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Deactivate a DataSync job matching the primary key
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.Datasync.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="jobId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="dataSyncApiJobV1DeactivateJobRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeactivateTenantDataSyncJobAsync(string tenantId, string jobId, string? apiVersion = default(string?), string? xVersion = default(string?), DataSyncApiJobV1DeactivateJobRequest? dataSyncApiJobV1DeactivateJobRequest = default(DataSyncApiJobV1DeactivateJobRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Deactivate a DataSync job matching the primary key
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.Datasync.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="jobId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="dataSyncApiJobV1DeactivateJobRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeactivateTenantDataSyncJobWithHttpInfoAsync(string tenantId, string jobId, string? apiVersion = default(string?), string? xVersion = default(string?), DataSyncApiJobV1DeactivateJobRequest? dataSyncApiJobV1DeactivateJobRequest = default(DataSyncApiJobV1DeactivateJobRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete a DataSync job matching the primary key
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.Datasync.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="jobId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="dataSyncApiJobV1DeleteJobRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteTenantDataSyncJobAsync(string tenantId, string jobId, string? apiVersion = default(string?), string? xVersion = default(string?), DataSyncApiJobV1DeleteJobRequest? dataSyncApiJobV1DeleteJobRequest = default(DataSyncApiJobV1DeleteJobRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete a DataSync job matching the primary key
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.Datasync.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="jobId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="dataSyncApiJobV1DeleteJobRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteTenantDataSyncJobWithHttpInfoAsync(string tenantId, string jobId, string? apiVersion = default(string?), string? xVersion = default(string?), DataSyncApiJobV1DeleteJobRequest? dataSyncApiJobV1DeleteJobRequest = default(DataSyncApiJobV1DeleteJobRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Execute a DataSync job matching the primary key
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.Datasync.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="jobId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="dataSyncApiJobV1ExecuteJobRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ExecuteTenantDataSyncJobAsync(string tenantId, string jobId, string? apiVersion = default(string?), string? xVersion = default(string?), DataSyncApiJobV1ExecuteJobRequest? dataSyncApiJobV1ExecuteJobRequest = default(DataSyncApiJobV1ExecuteJobRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Execute a DataSync job matching the primary key
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.Datasync.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="jobId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="dataSyncApiJobV1ExecuteJobRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ExecuteTenantDataSyncJobWithHttpInfoAsync(string tenantId, string jobId, string? apiVersion = default(string?), string? xVersion = default(string?), DataSyncApiJobV1ExecuteJobRequest? dataSyncApiJobV1ExecuteJobRequest = default(DataSyncApiJobV1ExecuteJobRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves a list of DataSync Jobs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.Datasync.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="pageSize"> (optional, default to 10)</param>
        /// <param name="pageIndex"> (optional, default to 0)</param>
        /// <param name="orderBy"> (optional, default to &quot;&quot;)</param>
        /// <param name="filter"> (optional, default to &quot;&quot;)</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DataSyncApiJobV1JobListResponsePaginatedItemsViewModel</returns>
        System.Threading.Tasks.Task<DataSyncApiJobV1JobListResponsePaginatedItemsViewModel> GetAllTenantDataSyncJobsAsync(string tenantId, int? pageSize = default(int?), int? pageIndex = default(int?), string? orderBy = default(string?), string? filter = default(string?), string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves a list of DataSync Jobs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.Datasync.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="pageSize"> (optional, default to 10)</param>
        /// <param name="pageIndex"> (optional, default to 0)</param>
        /// <param name="orderBy"> (optional, default to &quot;&quot;)</param>
        /// <param name="filter"> (optional, default to &quot;&quot;)</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DataSyncApiJobV1JobListResponsePaginatedItemsViewModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataSyncApiJobV1JobListResponsePaginatedItemsViewModel>> GetAllTenantDataSyncJobsWithHttpInfoAsync(string tenantId, int? pageSize = default(int?), int? pageIndex = default(int?), string? orderBy = default(string?), string? filter = default(string?), string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves a specific DataSync job using its primary key
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.Datasync.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="jobId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DataSyncApiJobV1JobProfileResponse</returns>
        System.Threading.Tasks.Task<DataSyncApiJobV1JobProfileResponse> GetTenantDataSyncJobProfileByIdAsync(string tenantId, string jobId, string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves a specific DataSync job using its primary key
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.Datasync.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="jobId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DataSyncApiJobV1JobProfileResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataSyncApiJobV1JobProfileResponse>> GetTenantDataSyncJobProfileByIdWithHttpInfoAsync(string tenantId, string jobId, string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Updates a DataSync job matching the primary key
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.Datasync.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="jobId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="dataSyncApiJobV1UpdateJobRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateTenantDataSyncJobAsync(string tenantId, string jobId, string? apiVersion = default(string?), string? xVersion = default(string?), DataSyncApiJobV1UpdateJobRequest? dataSyncApiJobV1UpdateJobRequest = default(DataSyncApiJobV1UpdateJobRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Updates a DataSync job matching the primary key
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.Datasync.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="jobId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="dataSyncApiJobV1UpdateJobRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateTenantDataSyncJobWithHttpInfoAsync(string tenantId, string jobId, string? apiVersion = default(string?), string? xVersion = default(string?), DataSyncApiJobV1UpdateJobRequest? dataSyncApiJobV1UpdateJobRequest = default(DataSyncApiJobV1UpdateJobRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IJobsApi : IJobsApiSync, IJobsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class JobsApi : IJobsApi
    {
        private EdGraph.Datasync.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="JobsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public JobsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="JobsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public JobsApi(string basePath)
        {
            this.Configuration = EdGraph.Datasync.Client.Client.Configuration.MergeConfigurations(
                EdGraph.Datasync.Client.Client.GlobalConfiguration.Instance,
                new EdGraph.Datasync.Client.Client.Configuration { BasePath = basePath }
            );
            this.Client = new EdGraph.Datasync.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new EdGraph.Datasync.Client.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = EdGraph.Datasync.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="JobsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public JobsApi(EdGraph.Datasync.Client.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = EdGraph.Datasync.Client.Client.Configuration.MergeConfigurations(
                EdGraph.Datasync.Client.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new EdGraph.Datasync.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new EdGraph.Datasync.Client.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = EdGraph.Datasync.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="JobsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public JobsApi(EdGraph.Datasync.Client.Client.ISynchronousClient client, EdGraph.Datasync.Client.Client.IAsynchronousClient asyncClient, EdGraph.Datasync.Client.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = EdGraph.Datasync.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public EdGraph.Datasync.Client.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public EdGraph.Datasync.Client.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public EdGraph.Datasync.Client.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public EdGraph.Datasync.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Activate a DataSync job matching the primary key 
        /// </summary>
        /// <exception cref="EdGraph.Datasync.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="jobId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="dataSyncApiJobV1ActivateJobRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ActivateTenantDataSyncJob(string tenantId, string jobId, string? apiVersion = default(string?), string? xVersion = default(string?), DataSyncApiJobV1ActivateJobRequest? dataSyncApiJobV1ActivateJobRequest = default(DataSyncApiJobV1ActivateJobRequest?), int operationIndex = 0)
        {
            ActivateTenantDataSyncJobWithHttpInfo(tenantId, jobId, apiVersion, xVersion, dataSyncApiJobV1ActivateJobRequest);
        }

        /// <summary>
        /// Activate a DataSync job matching the primary key 
        /// </summary>
        /// <exception cref="EdGraph.Datasync.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="jobId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="dataSyncApiJobV1ActivateJobRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public EdGraph.Datasync.Client.Client.ApiResponse<Object> ActivateTenantDataSyncJobWithHttpInfo(string tenantId, string jobId, string? apiVersion = default(string?), string? xVersion = default(string?), DataSyncApiJobV1ActivateJobRequest? dataSyncApiJobV1ActivateJobRequest = default(DataSyncApiJobV1ActivateJobRequest?), int operationIndex = 0)
        {
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
            {
                throw new EdGraph.Datasync.Client.Client.ApiException(400, "Missing required parameter 'tenantId' when calling JobsApi->ActivateTenantDataSyncJob");
            }

            // verify the required parameter 'jobId' is set
            if (jobId == null)
            {
                throw new EdGraph.Datasync.Client.Client.ApiException(400, "Missing required parameter 'jobId' when calling JobsApi->ActivateTenantDataSyncJob");
            }

            EdGraph.Datasync.Client.Client.RequestOptions localVarRequestOptions = new EdGraph.Datasync.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EdGraph.Datasync.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdGraph.Datasync.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenantId", EdGraph.Datasync.Client.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            localVarRequestOptions.PathParameters.Add("jobId", EdGraph.Datasync.Client.Client.ClientUtils.ParameterToString(jobId)); // path parameter
            if (apiVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.Datasync.Client.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));
            }
            if (xVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-version", EdGraph.Datasync.Client.Client.ClientUtils.ParameterToString(xVersion)); // header parameter
            }
            localVarRequestOptions.Data = dataSyncApiJobV1ActivateJobRequest;

            localVarRequestOptions.Operation = "JobsApi.ActivateTenantDataSyncJob";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/tenants/{tenantId}/datasync/jobs/{jobId}/activate", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ActivateTenantDataSyncJob", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Activate a DataSync job matching the primary key 
        /// </summary>
        /// <exception cref="EdGraph.Datasync.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="jobId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="dataSyncApiJobV1ActivateJobRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ActivateTenantDataSyncJobAsync(string tenantId, string jobId, string? apiVersion = default(string?), string? xVersion = default(string?), DataSyncApiJobV1ActivateJobRequest? dataSyncApiJobV1ActivateJobRequest = default(DataSyncApiJobV1ActivateJobRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ActivateTenantDataSyncJobWithHttpInfoAsync(tenantId, jobId, apiVersion, xVersion, dataSyncApiJobV1ActivateJobRequest, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Activate a DataSync job matching the primary key 
        /// </summary>
        /// <exception cref="EdGraph.Datasync.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="jobId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="dataSyncApiJobV1ActivateJobRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<EdGraph.Datasync.Client.Client.ApiResponse<Object>> ActivateTenantDataSyncJobWithHttpInfoAsync(string tenantId, string jobId, string? apiVersion = default(string?), string? xVersion = default(string?), DataSyncApiJobV1ActivateJobRequest? dataSyncApiJobV1ActivateJobRequest = default(DataSyncApiJobV1ActivateJobRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
            {
                throw new EdGraph.Datasync.Client.Client.ApiException(400, "Missing required parameter 'tenantId' when calling JobsApi->ActivateTenantDataSyncJob");
            }

            // verify the required parameter 'jobId' is set
            if (jobId == null)
            {
                throw new EdGraph.Datasync.Client.Client.ApiException(400, "Missing required parameter 'jobId' when calling JobsApi->ActivateTenantDataSyncJob");
            }


            EdGraph.Datasync.Client.Client.RequestOptions localVarRequestOptions = new EdGraph.Datasync.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EdGraph.Datasync.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdGraph.Datasync.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenantId", EdGraph.Datasync.Client.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            localVarRequestOptions.PathParameters.Add("jobId", EdGraph.Datasync.Client.Client.ClientUtils.ParameterToString(jobId)); // path parameter
            if (apiVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.Datasync.Client.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));
            }
            if (xVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-version", EdGraph.Datasync.Client.Client.ClientUtils.ParameterToString(xVersion)); // header parameter
            }
            localVarRequestOptions.Data = dataSyncApiJobV1ActivateJobRequest;

            localVarRequestOptions.Operation = "JobsApi.ActivateTenantDataSyncJob";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/tenants/{tenantId}/datasync/jobs/{jobId}/activate", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ActivateTenantDataSyncJob", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Cancel a DataSync job matching the primary key 
        /// </summary>
        /// <exception cref="EdGraph.Datasync.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="jobId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="dataSyncApiJobV1CancelJobRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void CancelTenantDataSyncJob(string tenantId, string jobId, string? apiVersion = default(string?), string? xVersion = default(string?), DataSyncApiJobV1CancelJobRequest? dataSyncApiJobV1CancelJobRequest = default(DataSyncApiJobV1CancelJobRequest?), int operationIndex = 0)
        {
            CancelTenantDataSyncJobWithHttpInfo(tenantId, jobId, apiVersion, xVersion, dataSyncApiJobV1CancelJobRequest);
        }

        /// <summary>
        /// Cancel a DataSync job matching the primary key 
        /// </summary>
        /// <exception cref="EdGraph.Datasync.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="jobId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="dataSyncApiJobV1CancelJobRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public EdGraph.Datasync.Client.Client.ApiResponse<Object> CancelTenantDataSyncJobWithHttpInfo(string tenantId, string jobId, string? apiVersion = default(string?), string? xVersion = default(string?), DataSyncApiJobV1CancelJobRequest? dataSyncApiJobV1CancelJobRequest = default(DataSyncApiJobV1CancelJobRequest?), int operationIndex = 0)
        {
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
            {
                throw new EdGraph.Datasync.Client.Client.ApiException(400, "Missing required parameter 'tenantId' when calling JobsApi->CancelTenantDataSyncJob");
            }

            // verify the required parameter 'jobId' is set
            if (jobId == null)
            {
                throw new EdGraph.Datasync.Client.Client.ApiException(400, "Missing required parameter 'jobId' when calling JobsApi->CancelTenantDataSyncJob");
            }

            EdGraph.Datasync.Client.Client.RequestOptions localVarRequestOptions = new EdGraph.Datasync.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EdGraph.Datasync.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdGraph.Datasync.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenantId", EdGraph.Datasync.Client.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            localVarRequestOptions.PathParameters.Add("jobId", EdGraph.Datasync.Client.Client.ClientUtils.ParameterToString(jobId)); // path parameter
            if (apiVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.Datasync.Client.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));
            }
            if (xVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-version", EdGraph.Datasync.Client.Client.ClientUtils.ParameterToString(xVersion)); // header parameter
            }
            localVarRequestOptions.Data = dataSyncApiJobV1CancelJobRequest;

            localVarRequestOptions.Operation = "JobsApi.CancelTenantDataSyncJob";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/tenants/{tenantId}/datasync/jobs/{jobId}/cancel", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CancelTenantDataSyncJob", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Cancel a DataSync job matching the primary key 
        /// </summary>
        /// <exception cref="EdGraph.Datasync.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="jobId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="dataSyncApiJobV1CancelJobRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CancelTenantDataSyncJobAsync(string tenantId, string jobId, string? apiVersion = default(string?), string? xVersion = default(string?), DataSyncApiJobV1CancelJobRequest? dataSyncApiJobV1CancelJobRequest = default(DataSyncApiJobV1CancelJobRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await CancelTenantDataSyncJobWithHttpInfoAsync(tenantId, jobId, apiVersion, xVersion, dataSyncApiJobV1CancelJobRequest, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Cancel a DataSync job matching the primary key 
        /// </summary>
        /// <exception cref="EdGraph.Datasync.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="jobId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="dataSyncApiJobV1CancelJobRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<EdGraph.Datasync.Client.Client.ApiResponse<Object>> CancelTenantDataSyncJobWithHttpInfoAsync(string tenantId, string jobId, string? apiVersion = default(string?), string? xVersion = default(string?), DataSyncApiJobV1CancelJobRequest? dataSyncApiJobV1CancelJobRequest = default(DataSyncApiJobV1CancelJobRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
            {
                throw new EdGraph.Datasync.Client.Client.ApiException(400, "Missing required parameter 'tenantId' when calling JobsApi->CancelTenantDataSyncJob");
            }

            // verify the required parameter 'jobId' is set
            if (jobId == null)
            {
                throw new EdGraph.Datasync.Client.Client.ApiException(400, "Missing required parameter 'jobId' when calling JobsApi->CancelTenantDataSyncJob");
            }


            EdGraph.Datasync.Client.Client.RequestOptions localVarRequestOptions = new EdGraph.Datasync.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EdGraph.Datasync.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdGraph.Datasync.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenantId", EdGraph.Datasync.Client.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            localVarRequestOptions.PathParameters.Add("jobId", EdGraph.Datasync.Client.Client.ClientUtils.ParameterToString(jobId)); // path parameter
            if (apiVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.Datasync.Client.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));
            }
            if (xVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-version", EdGraph.Datasync.Client.Client.ClientUtils.ParameterToString(xVersion)); // header parameter
            }
            localVarRequestOptions.Data = dataSyncApiJobV1CancelJobRequest;

            localVarRequestOptions.Operation = "JobsApi.CancelTenantDataSyncJob";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/tenants/{tenantId}/datasync/jobs/{jobId}/cancel", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CancelTenantDataSyncJob", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates a new DataSync job 
        /// </summary>
        /// <exception cref="EdGraph.Datasync.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="dataSyncApiJobV1CreateJobRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void CreateTenantDataSyncJob(string tenantId, string? apiVersion = default(string?), string? xVersion = default(string?), DataSyncApiJobV1CreateJobRequest? dataSyncApiJobV1CreateJobRequest = default(DataSyncApiJobV1CreateJobRequest?), int operationIndex = 0)
        {
            CreateTenantDataSyncJobWithHttpInfo(tenantId, apiVersion, xVersion, dataSyncApiJobV1CreateJobRequest);
        }

        /// <summary>
        /// Creates a new DataSync job 
        /// </summary>
        /// <exception cref="EdGraph.Datasync.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="dataSyncApiJobV1CreateJobRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public EdGraph.Datasync.Client.Client.ApiResponse<Object> CreateTenantDataSyncJobWithHttpInfo(string tenantId, string? apiVersion = default(string?), string? xVersion = default(string?), DataSyncApiJobV1CreateJobRequest? dataSyncApiJobV1CreateJobRequest = default(DataSyncApiJobV1CreateJobRequest?), int operationIndex = 0)
        {
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
            {
                throw new EdGraph.Datasync.Client.Client.ApiException(400, "Missing required parameter 'tenantId' when calling JobsApi->CreateTenantDataSyncJob");
            }

            EdGraph.Datasync.Client.Client.RequestOptions localVarRequestOptions = new EdGraph.Datasync.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EdGraph.Datasync.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdGraph.Datasync.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenantId", EdGraph.Datasync.Client.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            if (apiVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.Datasync.Client.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));
            }
            if (xVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-version", EdGraph.Datasync.Client.Client.ClientUtils.ParameterToString(xVersion)); // header parameter
            }
            localVarRequestOptions.Data = dataSyncApiJobV1CreateJobRequest;

            localVarRequestOptions.Operation = "JobsApi.CreateTenantDataSyncJob";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/tenants/{tenantId}/datasync/jobs/create", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateTenantDataSyncJob", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates a new DataSync job 
        /// </summary>
        /// <exception cref="EdGraph.Datasync.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="dataSyncApiJobV1CreateJobRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CreateTenantDataSyncJobAsync(string tenantId, string? apiVersion = default(string?), string? xVersion = default(string?), DataSyncApiJobV1CreateJobRequest? dataSyncApiJobV1CreateJobRequest = default(DataSyncApiJobV1CreateJobRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await CreateTenantDataSyncJobWithHttpInfoAsync(tenantId, apiVersion, xVersion, dataSyncApiJobV1CreateJobRequest, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Creates a new DataSync job 
        /// </summary>
        /// <exception cref="EdGraph.Datasync.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="dataSyncApiJobV1CreateJobRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<EdGraph.Datasync.Client.Client.ApiResponse<Object>> CreateTenantDataSyncJobWithHttpInfoAsync(string tenantId, string? apiVersion = default(string?), string? xVersion = default(string?), DataSyncApiJobV1CreateJobRequest? dataSyncApiJobV1CreateJobRequest = default(DataSyncApiJobV1CreateJobRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
            {
                throw new EdGraph.Datasync.Client.Client.ApiException(400, "Missing required parameter 'tenantId' when calling JobsApi->CreateTenantDataSyncJob");
            }


            EdGraph.Datasync.Client.Client.RequestOptions localVarRequestOptions = new EdGraph.Datasync.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EdGraph.Datasync.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdGraph.Datasync.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenantId", EdGraph.Datasync.Client.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            if (apiVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.Datasync.Client.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));
            }
            if (xVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-version", EdGraph.Datasync.Client.Client.ClientUtils.ParameterToString(xVersion)); // header parameter
            }
            localVarRequestOptions.Data = dataSyncApiJobV1CreateJobRequest;

            localVarRequestOptions.Operation = "JobsApi.CreateTenantDataSyncJob";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/tenants/{tenantId}/datasync/jobs/create", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateTenantDataSyncJob", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deactivate a DataSync job matching the primary key 
        /// </summary>
        /// <exception cref="EdGraph.Datasync.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="jobId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="dataSyncApiJobV1DeactivateJobRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeactivateTenantDataSyncJob(string tenantId, string jobId, string? apiVersion = default(string?), string? xVersion = default(string?), DataSyncApiJobV1DeactivateJobRequest? dataSyncApiJobV1DeactivateJobRequest = default(DataSyncApiJobV1DeactivateJobRequest?), int operationIndex = 0)
        {
            DeactivateTenantDataSyncJobWithHttpInfo(tenantId, jobId, apiVersion, xVersion, dataSyncApiJobV1DeactivateJobRequest);
        }

        /// <summary>
        /// Deactivate a DataSync job matching the primary key 
        /// </summary>
        /// <exception cref="EdGraph.Datasync.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="jobId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="dataSyncApiJobV1DeactivateJobRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public EdGraph.Datasync.Client.Client.ApiResponse<Object> DeactivateTenantDataSyncJobWithHttpInfo(string tenantId, string jobId, string? apiVersion = default(string?), string? xVersion = default(string?), DataSyncApiJobV1DeactivateJobRequest? dataSyncApiJobV1DeactivateJobRequest = default(DataSyncApiJobV1DeactivateJobRequest?), int operationIndex = 0)
        {
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
            {
                throw new EdGraph.Datasync.Client.Client.ApiException(400, "Missing required parameter 'tenantId' when calling JobsApi->DeactivateTenantDataSyncJob");
            }

            // verify the required parameter 'jobId' is set
            if (jobId == null)
            {
                throw new EdGraph.Datasync.Client.Client.ApiException(400, "Missing required parameter 'jobId' when calling JobsApi->DeactivateTenantDataSyncJob");
            }

            EdGraph.Datasync.Client.Client.RequestOptions localVarRequestOptions = new EdGraph.Datasync.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EdGraph.Datasync.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdGraph.Datasync.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenantId", EdGraph.Datasync.Client.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            localVarRequestOptions.PathParameters.Add("jobId", EdGraph.Datasync.Client.Client.ClientUtils.ParameterToString(jobId)); // path parameter
            if (apiVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.Datasync.Client.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));
            }
            if (xVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-version", EdGraph.Datasync.Client.Client.ClientUtils.ParameterToString(xVersion)); // header parameter
            }
            localVarRequestOptions.Data = dataSyncApiJobV1DeactivateJobRequest;

            localVarRequestOptions.Operation = "JobsApi.DeactivateTenantDataSyncJob";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/tenants/{tenantId}/datasync/jobs/{jobId}/deactivate", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeactivateTenantDataSyncJob", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deactivate a DataSync job matching the primary key 
        /// </summary>
        /// <exception cref="EdGraph.Datasync.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="jobId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="dataSyncApiJobV1DeactivateJobRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeactivateTenantDataSyncJobAsync(string tenantId, string jobId, string? apiVersion = default(string?), string? xVersion = default(string?), DataSyncApiJobV1DeactivateJobRequest? dataSyncApiJobV1DeactivateJobRequest = default(DataSyncApiJobV1DeactivateJobRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeactivateTenantDataSyncJobWithHttpInfoAsync(tenantId, jobId, apiVersion, xVersion, dataSyncApiJobV1DeactivateJobRequest, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Deactivate a DataSync job matching the primary key 
        /// </summary>
        /// <exception cref="EdGraph.Datasync.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="jobId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="dataSyncApiJobV1DeactivateJobRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<EdGraph.Datasync.Client.Client.ApiResponse<Object>> DeactivateTenantDataSyncJobWithHttpInfoAsync(string tenantId, string jobId, string? apiVersion = default(string?), string? xVersion = default(string?), DataSyncApiJobV1DeactivateJobRequest? dataSyncApiJobV1DeactivateJobRequest = default(DataSyncApiJobV1DeactivateJobRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
            {
                throw new EdGraph.Datasync.Client.Client.ApiException(400, "Missing required parameter 'tenantId' when calling JobsApi->DeactivateTenantDataSyncJob");
            }

            // verify the required parameter 'jobId' is set
            if (jobId == null)
            {
                throw new EdGraph.Datasync.Client.Client.ApiException(400, "Missing required parameter 'jobId' when calling JobsApi->DeactivateTenantDataSyncJob");
            }


            EdGraph.Datasync.Client.Client.RequestOptions localVarRequestOptions = new EdGraph.Datasync.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EdGraph.Datasync.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdGraph.Datasync.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenantId", EdGraph.Datasync.Client.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            localVarRequestOptions.PathParameters.Add("jobId", EdGraph.Datasync.Client.Client.ClientUtils.ParameterToString(jobId)); // path parameter
            if (apiVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.Datasync.Client.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));
            }
            if (xVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-version", EdGraph.Datasync.Client.Client.ClientUtils.ParameterToString(xVersion)); // header parameter
            }
            localVarRequestOptions.Data = dataSyncApiJobV1DeactivateJobRequest;

            localVarRequestOptions.Operation = "JobsApi.DeactivateTenantDataSyncJob";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/tenants/{tenantId}/datasync/jobs/{jobId}/deactivate", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeactivateTenantDataSyncJob", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a DataSync job matching the primary key 
        /// </summary>
        /// <exception cref="EdGraph.Datasync.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="jobId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="dataSyncApiJobV1DeleteJobRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeleteTenantDataSyncJob(string tenantId, string jobId, string? apiVersion = default(string?), string? xVersion = default(string?), DataSyncApiJobV1DeleteJobRequest? dataSyncApiJobV1DeleteJobRequest = default(DataSyncApiJobV1DeleteJobRequest?), int operationIndex = 0)
        {
            DeleteTenantDataSyncJobWithHttpInfo(tenantId, jobId, apiVersion, xVersion, dataSyncApiJobV1DeleteJobRequest);
        }

        /// <summary>
        /// Delete a DataSync job matching the primary key 
        /// </summary>
        /// <exception cref="EdGraph.Datasync.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="jobId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="dataSyncApiJobV1DeleteJobRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public EdGraph.Datasync.Client.Client.ApiResponse<Object> DeleteTenantDataSyncJobWithHttpInfo(string tenantId, string jobId, string? apiVersion = default(string?), string? xVersion = default(string?), DataSyncApiJobV1DeleteJobRequest? dataSyncApiJobV1DeleteJobRequest = default(DataSyncApiJobV1DeleteJobRequest?), int operationIndex = 0)
        {
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
            {
                throw new EdGraph.Datasync.Client.Client.ApiException(400, "Missing required parameter 'tenantId' when calling JobsApi->DeleteTenantDataSyncJob");
            }

            // verify the required parameter 'jobId' is set
            if (jobId == null)
            {
                throw new EdGraph.Datasync.Client.Client.ApiException(400, "Missing required parameter 'jobId' when calling JobsApi->DeleteTenantDataSyncJob");
            }

            EdGraph.Datasync.Client.Client.RequestOptions localVarRequestOptions = new EdGraph.Datasync.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EdGraph.Datasync.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdGraph.Datasync.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenantId", EdGraph.Datasync.Client.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            localVarRequestOptions.PathParameters.Add("jobId", EdGraph.Datasync.Client.Client.ClientUtils.ParameterToString(jobId)); // path parameter
            if (apiVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.Datasync.Client.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));
            }
            if (xVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-version", EdGraph.Datasync.Client.Client.ClientUtils.ParameterToString(xVersion)); // header parameter
            }
            localVarRequestOptions.Data = dataSyncApiJobV1DeleteJobRequest;

            localVarRequestOptions.Operation = "JobsApi.DeleteTenantDataSyncJob";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/tenants/{tenantId}/datasync/jobs/{jobId}/delete", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteTenantDataSyncJob", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a DataSync job matching the primary key 
        /// </summary>
        /// <exception cref="EdGraph.Datasync.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="jobId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="dataSyncApiJobV1DeleteJobRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteTenantDataSyncJobAsync(string tenantId, string jobId, string? apiVersion = default(string?), string? xVersion = default(string?), DataSyncApiJobV1DeleteJobRequest? dataSyncApiJobV1DeleteJobRequest = default(DataSyncApiJobV1DeleteJobRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteTenantDataSyncJobWithHttpInfoAsync(tenantId, jobId, apiVersion, xVersion, dataSyncApiJobV1DeleteJobRequest, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete a DataSync job matching the primary key 
        /// </summary>
        /// <exception cref="EdGraph.Datasync.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="jobId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="dataSyncApiJobV1DeleteJobRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<EdGraph.Datasync.Client.Client.ApiResponse<Object>> DeleteTenantDataSyncJobWithHttpInfoAsync(string tenantId, string jobId, string? apiVersion = default(string?), string? xVersion = default(string?), DataSyncApiJobV1DeleteJobRequest? dataSyncApiJobV1DeleteJobRequest = default(DataSyncApiJobV1DeleteJobRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
            {
                throw new EdGraph.Datasync.Client.Client.ApiException(400, "Missing required parameter 'tenantId' when calling JobsApi->DeleteTenantDataSyncJob");
            }

            // verify the required parameter 'jobId' is set
            if (jobId == null)
            {
                throw new EdGraph.Datasync.Client.Client.ApiException(400, "Missing required parameter 'jobId' when calling JobsApi->DeleteTenantDataSyncJob");
            }


            EdGraph.Datasync.Client.Client.RequestOptions localVarRequestOptions = new EdGraph.Datasync.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EdGraph.Datasync.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdGraph.Datasync.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenantId", EdGraph.Datasync.Client.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            localVarRequestOptions.PathParameters.Add("jobId", EdGraph.Datasync.Client.Client.ClientUtils.ParameterToString(jobId)); // path parameter
            if (apiVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.Datasync.Client.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));
            }
            if (xVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-version", EdGraph.Datasync.Client.Client.ClientUtils.ParameterToString(xVersion)); // header parameter
            }
            localVarRequestOptions.Data = dataSyncApiJobV1DeleteJobRequest;

            localVarRequestOptions.Operation = "JobsApi.DeleteTenantDataSyncJob";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/tenants/{tenantId}/datasync/jobs/{jobId}/delete", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteTenantDataSyncJob", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Execute a DataSync job matching the primary key 
        /// </summary>
        /// <exception cref="EdGraph.Datasync.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="jobId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="dataSyncApiJobV1ExecuteJobRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ExecuteTenantDataSyncJob(string tenantId, string jobId, string? apiVersion = default(string?), string? xVersion = default(string?), DataSyncApiJobV1ExecuteJobRequest? dataSyncApiJobV1ExecuteJobRequest = default(DataSyncApiJobV1ExecuteJobRequest?), int operationIndex = 0)
        {
            ExecuteTenantDataSyncJobWithHttpInfo(tenantId, jobId, apiVersion, xVersion, dataSyncApiJobV1ExecuteJobRequest);
        }

        /// <summary>
        /// Execute a DataSync job matching the primary key 
        /// </summary>
        /// <exception cref="EdGraph.Datasync.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="jobId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="dataSyncApiJobV1ExecuteJobRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public EdGraph.Datasync.Client.Client.ApiResponse<Object> ExecuteTenantDataSyncJobWithHttpInfo(string tenantId, string jobId, string? apiVersion = default(string?), string? xVersion = default(string?), DataSyncApiJobV1ExecuteJobRequest? dataSyncApiJobV1ExecuteJobRequest = default(DataSyncApiJobV1ExecuteJobRequest?), int operationIndex = 0)
        {
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
            {
                throw new EdGraph.Datasync.Client.Client.ApiException(400, "Missing required parameter 'tenantId' when calling JobsApi->ExecuteTenantDataSyncJob");
            }

            // verify the required parameter 'jobId' is set
            if (jobId == null)
            {
                throw new EdGraph.Datasync.Client.Client.ApiException(400, "Missing required parameter 'jobId' when calling JobsApi->ExecuteTenantDataSyncJob");
            }

            EdGraph.Datasync.Client.Client.RequestOptions localVarRequestOptions = new EdGraph.Datasync.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EdGraph.Datasync.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdGraph.Datasync.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenantId", EdGraph.Datasync.Client.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            localVarRequestOptions.PathParameters.Add("jobId", EdGraph.Datasync.Client.Client.ClientUtils.ParameterToString(jobId)); // path parameter
            if (apiVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.Datasync.Client.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));
            }
            if (xVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-version", EdGraph.Datasync.Client.Client.ClientUtils.ParameterToString(xVersion)); // header parameter
            }
            localVarRequestOptions.Data = dataSyncApiJobV1ExecuteJobRequest;

            localVarRequestOptions.Operation = "JobsApi.ExecuteTenantDataSyncJob";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/tenants/{tenantId}/datasync/jobs/{jobId}/execute", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ExecuteTenantDataSyncJob", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Execute a DataSync job matching the primary key 
        /// </summary>
        /// <exception cref="EdGraph.Datasync.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="jobId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="dataSyncApiJobV1ExecuteJobRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ExecuteTenantDataSyncJobAsync(string tenantId, string jobId, string? apiVersion = default(string?), string? xVersion = default(string?), DataSyncApiJobV1ExecuteJobRequest? dataSyncApiJobV1ExecuteJobRequest = default(DataSyncApiJobV1ExecuteJobRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ExecuteTenantDataSyncJobWithHttpInfoAsync(tenantId, jobId, apiVersion, xVersion, dataSyncApiJobV1ExecuteJobRequest, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Execute a DataSync job matching the primary key 
        /// </summary>
        /// <exception cref="EdGraph.Datasync.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="jobId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="dataSyncApiJobV1ExecuteJobRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<EdGraph.Datasync.Client.Client.ApiResponse<Object>> ExecuteTenantDataSyncJobWithHttpInfoAsync(string tenantId, string jobId, string? apiVersion = default(string?), string? xVersion = default(string?), DataSyncApiJobV1ExecuteJobRequest? dataSyncApiJobV1ExecuteJobRequest = default(DataSyncApiJobV1ExecuteJobRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
            {
                throw new EdGraph.Datasync.Client.Client.ApiException(400, "Missing required parameter 'tenantId' when calling JobsApi->ExecuteTenantDataSyncJob");
            }

            // verify the required parameter 'jobId' is set
            if (jobId == null)
            {
                throw new EdGraph.Datasync.Client.Client.ApiException(400, "Missing required parameter 'jobId' when calling JobsApi->ExecuteTenantDataSyncJob");
            }


            EdGraph.Datasync.Client.Client.RequestOptions localVarRequestOptions = new EdGraph.Datasync.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EdGraph.Datasync.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdGraph.Datasync.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenantId", EdGraph.Datasync.Client.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            localVarRequestOptions.PathParameters.Add("jobId", EdGraph.Datasync.Client.Client.ClientUtils.ParameterToString(jobId)); // path parameter
            if (apiVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.Datasync.Client.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));
            }
            if (xVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-version", EdGraph.Datasync.Client.Client.ClientUtils.ParameterToString(xVersion)); // header parameter
            }
            localVarRequestOptions.Data = dataSyncApiJobV1ExecuteJobRequest;

            localVarRequestOptions.Operation = "JobsApi.ExecuteTenantDataSyncJob";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/tenants/{tenantId}/datasync/jobs/{jobId}/execute", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ExecuteTenantDataSyncJob", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves a list of DataSync Jobs 
        /// </summary>
        /// <exception cref="EdGraph.Datasync.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="pageSize"> (optional, default to 10)</param>
        /// <param name="pageIndex"> (optional, default to 0)</param>
        /// <param name="orderBy"> (optional, default to &quot;&quot;)</param>
        /// <param name="filter"> (optional, default to &quot;&quot;)</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DataSyncApiJobV1JobListResponsePaginatedItemsViewModel</returns>
        public DataSyncApiJobV1JobListResponsePaginatedItemsViewModel GetAllTenantDataSyncJobs(string tenantId, int? pageSize = default(int?), int? pageIndex = default(int?), string? orderBy = default(string?), string? filter = default(string?), string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0)
        {
            EdGraph.Datasync.Client.Client.ApiResponse<DataSyncApiJobV1JobListResponsePaginatedItemsViewModel> localVarResponse = GetAllTenantDataSyncJobsWithHttpInfo(tenantId, pageSize, pageIndex, orderBy, filter, apiVersion, xVersion);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a list of DataSync Jobs 
        /// </summary>
        /// <exception cref="EdGraph.Datasync.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="pageSize"> (optional, default to 10)</param>
        /// <param name="pageIndex"> (optional, default to 0)</param>
        /// <param name="orderBy"> (optional, default to &quot;&quot;)</param>
        /// <param name="filter"> (optional, default to &quot;&quot;)</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DataSyncApiJobV1JobListResponsePaginatedItemsViewModel</returns>
        public EdGraph.Datasync.Client.Client.ApiResponse<DataSyncApiJobV1JobListResponsePaginatedItemsViewModel> GetAllTenantDataSyncJobsWithHttpInfo(string tenantId, int? pageSize = default(int?), int? pageIndex = default(int?), string? orderBy = default(string?), string? filter = default(string?), string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
            {
                throw new EdGraph.Datasync.Client.Client.ApiException(400, "Missing required parameter 'tenantId' when calling JobsApi->GetAllTenantDataSyncJobs");
            }

            EdGraph.Datasync.Client.Client.RequestOptions localVarRequestOptions = new EdGraph.Datasync.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EdGraph.Datasync.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdGraph.Datasync.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenantId", EdGraph.Datasync.Client.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.Datasync.Client.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (pageIndex != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.Datasync.Client.Client.ClientUtils.ParameterToMultiMap("", "pageIndex", pageIndex));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.Datasync.Client.Client.ClientUtils.ParameterToMultiMap("", "orderBy", orderBy));
            }
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.Datasync.Client.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (apiVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.Datasync.Client.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));
            }
            if (xVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-version", EdGraph.Datasync.Client.Client.ClientUtils.ParameterToString(xVersion)); // header parameter
            }

            localVarRequestOptions.Operation = "JobsApi.GetAllTenantDataSyncJobs";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<DataSyncApiJobV1JobListResponsePaginatedItemsViewModel>("/tenants/{tenantId}/datasync/jobs", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllTenantDataSyncJobs", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves a list of DataSync Jobs 
        /// </summary>
        /// <exception cref="EdGraph.Datasync.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="pageSize"> (optional, default to 10)</param>
        /// <param name="pageIndex"> (optional, default to 0)</param>
        /// <param name="orderBy"> (optional, default to &quot;&quot;)</param>
        /// <param name="filter"> (optional, default to &quot;&quot;)</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DataSyncApiJobV1JobListResponsePaginatedItemsViewModel</returns>
        public async System.Threading.Tasks.Task<DataSyncApiJobV1JobListResponsePaginatedItemsViewModel> GetAllTenantDataSyncJobsAsync(string tenantId, int? pageSize = default(int?), int? pageIndex = default(int?), string? orderBy = default(string?), string? filter = default(string?), string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EdGraph.Datasync.Client.Client.ApiResponse<DataSyncApiJobV1JobListResponsePaginatedItemsViewModel> localVarResponse = await GetAllTenantDataSyncJobsWithHttpInfoAsync(tenantId, pageSize, pageIndex, orderBy, filter, apiVersion, xVersion, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a list of DataSync Jobs 
        /// </summary>
        /// <exception cref="EdGraph.Datasync.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="pageSize"> (optional, default to 10)</param>
        /// <param name="pageIndex"> (optional, default to 0)</param>
        /// <param name="orderBy"> (optional, default to &quot;&quot;)</param>
        /// <param name="filter"> (optional, default to &quot;&quot;)</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DataSyncApiJobV1JobListResponsePaginatedItemsViewModel)</returns>
        public async System.Threading.Tasks.Task<EdGraph.Datasync.Client.Client.ApiResponse<DataSyncApiJobV1JobListResponsePaginatedItemsViewModel>> GetAllTenantDataSyncJobsWithHttpInfoAsync(string tenantId, int? pageSize = default(int?), int? pageIndex = default(int?), string? orderBy = default(string?), string? filter = default(string?), string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
            {
                throw new EdGraph.Datasync.Client.Client.ApiException(400, "Missing required parameter 'tenantId' when calling JobsApi->GetAllTenantDataSyncJobs");
            }


            EdGraph.Datasync.Client.Client.RequestOptions localVarRequestOptions = new EdGraph.Datasync.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EdGraph.Datasync.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdGraph.Datasync.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenantId", EdGraph.Datasync.Client.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.Datasync.Client.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (pageIndex != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.Datasync.Client.Client.ClientUtils.ParameterToMultiMap("", "pageIndex", pageIndex));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.Datasync.Client.Client.ClientUtils.ParameterToMultiMap("", "orderBy", orderBy));
            }
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.Datasync.Client.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (apiVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.Datasync.Client.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));
            }
            if (xVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-version", EdGraph.Datasync.Client.Client.ClientUtils.ParameterToString(xVersion)); // header parameter
            }

            localVarRequestOptions.Operation = "JobsApi.GetAllTenantDataSyncJobs";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<DataSyncApiJobV1JobListResponsePaginatedItemsViewModel>("/tenants/{tenantId}/datasync/jobs", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllTenantDataSyncJobs", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves a specific DataSync job using its primary key 
        /// </summary>
        /// <exception cref="EdGraph.Datasync.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="jobId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DataSyncApiJobV1JobProfileResponse</returns>
        public DataSyncApiJobV1JobProfileResponse GetTenantDataSyncJobProfileById(string tenantId, string jobId, string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0)
        {
            EdGraph.Datasync.Client.Client.ApiResponse<DataSyncApiJobV1JobProfileResponse> localVarResponse = GetTenantDataSyncJobProfileByIdWithHttpInfo(tenantId, jobId, apiVersion, xVersion);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a specific DataSync job using its primary key 
        /// </summary>
        /// <exception cref="EdGraph.Datasync.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="jobId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DataSyncApiJobV1JobProfileResponse</returns>
        public EdGraph.Datasync.Client.Client.ApiResponse<DataSyncApiJobV1JobProfileResponse> GetTenantDataSyncJobProfileByIdWithHttpInfo(string tenantId, string jobId, string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
            {
                throw new EdGraph.Datasync.Client.Client.ApiException(400, "Missing required parameter 'tenantId' when calling JobsApi->GetTenantDataSyncJobProfileById");
            }

            // verify the required parameter 'jobId' is set
            if (jobId == null)
            {
                throw new EdGraph.Datasync.Client.Client.ApiException(400, "Missing required parameter 'jobId' when calling JobsApi->GetTenantDataSyncJobProfileById");
            }

            EdGraph.Datasync.Client.Client.RequestOptions localVarRequestOptions = new EdGraph.Datasync.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EdGraph.Datasync.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdGraph.Datasync.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenantId", EdGraph.Datasync.Client.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            localVarRequestOptions.PathParameters.Add("jobId", EdGraph.Datasync.Client.Client.ClientUtils.ParameterToString(jobId)); // path parameter
            if (apiVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.Datasync.Client.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));
            }
            if (xVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-version", EdGraph.Datasync.Client.Client.ClientUtils.ParameterToString(xVersion)); // header parameter
            }

            localVarRequestOptions.Operation = "JobsApi.GetTenantDataSyncJobProfileById";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<DataSyncApiJobV1JobProfileResponse>("/tenants/{tenantId}/datasync/jobs/{jobId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTenantDataSyncJobProfileById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves a specific DataSync job using its primary key 
        /// </summary>
        /// <exception cref="EdGraph.Datasync.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="jobId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DataSyncApiJobV1JobProfileResponse</returns>
        public async System.Threading.Tasks.Task<DataSyncApiJobV1JobProfileResponse> GetTenantDataSyncJobProfileByIdAsync(string tenantId, string jobId, string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EdGraph.Datasync.Client.Client.ApiResponse<DataSyncApiJobV1JobProfileResponse> localVarResponse = await GetTenantDataSyncJobProfileByIdWithHttpInfoAsync(tenantId, jobId, apiVersion, xVersion, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a specific DataSync job using its primary key 
        /// </summary>
        /// <exception cref="EdGraph.Datasync.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="jobId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DataSyncApiJobV1JobProfileResponse)</returns>
        public async System.Threading.Tasks.Task<EdGraph.Datasync.Client.Client.ApiResponse<DataSyncApiJobV1JobProfileResponse>> GetTenantDataSyncJobProfileByIdWithHttpInfoAsync(string tenantId, string jobId, string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
            {
                throw new EdGraph.Datasync.Client.Client.ApiException(400, "Missing required parameter 'tenantId' when calling JobsApi->GetTenantDataSyncJobProfileById");
            }

            // verify the required parameter 'jobId' is set
            if (jobId == null)
            {
                throw new EdGraph.Datasync.Client.Client.ApiException(400, "Missing required parameter 'jobId' when calling JobsApi->GetTenantDataSyncJobProfileById");
            }


            EdGraph.Datasync.Client.Client.RequestOptions localVarRequestOptions = new EdGraph.Datasync.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EdGraph.Datasync.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdGraph.Datasync.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenantId", EdGraph.Datasync.Client.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            localVarRequestOptions.PathParameters.Add("jobId", EdGraph.Datasync.Client.Client.ClientUtils.ParameterToString(jobId)); // path parameter
            if (apiVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.Datasync.Client.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));
            }
            if (xVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-version", EdGraph.Datasync.Client.Client.ClientUtils.ParameterToString(xVersion)); // header parameter
            }

            localVarRequestOptions.Operation = "JobsApi.GetTenantDataSyncJobProfileById";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<DataSyncApiJobV1JobProfileResponse>("/tenants/{tenantId}/datasync/jobs/{jobId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTenantDataSyncJobProfileById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates a DataSync job matching the primary key 
        /// </summary>
        /// <exception cref="EdGraph.Datasync.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="jobId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="dataSyncApiJobV1UpdateJobRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void UpdateTenantDataSyncJob(string tenantId, string jobId, string? apiVersion = default(string?), string? xVersion = default(string?), DataSyncApiJobV1UpdateJobRequest? dataSyncApiJobV1UpdateJobRequest = default(DataSyncApiJobV1UpdateJobRequest?), int operationIndex = 0)
        {
            UpdateTenantDataSyncJobWithHttpInfo(tenantId, jobId, apiVersion, xVersion, dataSyncApiJobV1UpdateJobRequest);
        }

        /// <summary>
        /// Updates a DataSync job matching the primary key 
        /// </summary>
        /// <exception cref="EdGraph.Datasync.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="jobId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="dataSyncApiJobV1UpdateJobRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public EdGraph.Datasync.Client.Client.ApiResponse<Object> UpdateTenantDataSyncJobWithHttpInfo(string tenantId, string jobId, string? apiVersion = default(string?), string? xVersion = default(string?), DataSyncApiJobV1UpdateJobRequest? dataSyncApiJobV1UpdateJobRequest = default(DataSyncApiJobV1UpdateJobRequest?), int operationIndex = 0)
        {
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
            {
                throw new EdGraph.Datasync.Client.Client.ApiException(400, "Missing required parameter 'tenantId' when calling JobsApi->UpdateTenantDataSyncJob");
            }

            // verify the required parameter 'jobId' is set
            if (jobId == null)
            {
                throw new EdGraph.Datasync.Client.Client.ApiException(400, "Missing required parameter 'jobId' when calling JobsApi->UpdateTenantDataSyncJob");
            }

            EdGraph.Datasync.Client.Client.RequestOptions localVarRequestOptions = new EdGraph.Datasync.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EdGraph.Datasync.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdGraph.Datasync.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenantId", EdGraph.Datasync.Client.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            localVarRequestOptions.PathParameters.Add("jobId", EdGraph.Datasync.Client.Client.ClientUtils.ParameterToString(jobId)); // path parameter
            if (apiVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.Datasync.Client.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));
            }
            if (xVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-version", EdGraph.Datasync.Client.Client.ClientUtils.ParameterToString(xVersion)); // header parameter
            }
            localVarRequestOptions.Data = dataSyncApiJobV1UpdateJobRequest;

            localVarRequestOptions.Operation = "JobsApi.UpdateTenantDataSyncJob";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/tenants/{tenantId}/datasync/jobs/{jobId}/update", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateTenantDataSyncJob", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates a DataSync job matching the primary key 
        /// </summary>
        /// <exception cref="EdGraph.Datasync.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="jobId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="dataSyncApiJobV1UpdateJobRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateTenantDataSyncJobAsync(string tenantId, string jobId, string? apiVersion = default(string?), string? xVersion = default(string?), DataSyncApiJobV1UpdateJobRequest? dataSyncApiJobV1UpdateJobRequest = default(DataSyncApiJobV1UpdateJobRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await UpdateTenantDataSyncJobWithHttpInfoAsync(tenantId, jobId, apiVersion, xVersion, dataSyncApiJobV1UpdateJobRequest, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Updates a DataSync job matching the primary key 
        /// </summary>
        /// <exception cref="EdGraph.Datasync.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="jobId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="dataSyncApiJobV1UpdateJobRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<EdGraph.Datasync.Client.Client.ApiResponse<Object>> UpdateTenantDataSyncJobWithHttpInfoAsync(string tenantId, string jobId, string? apiVersion = default(string?), string? xVersion = default(string?), DataSyncApiJobV1UpdateJobRequest? dataSyncApiJobV1UpdateJobRequest = default(DataSyncApiJobV1UpdateJobRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
            {
                throw new EdGraph.Datasync.Client.Client.ApiException(400, "Missing required parameter 'tenantId' when calling JobsApi->UpdateTenantDataSyncJob");
            }

            // verify the required parameter 'jobId' is set
            if (jobId == null)
            {
                throw new EdGraph.Datasync.Client.Client.ApiException(400, "Missing required parameter 'jobId' when calling JobsApi->UpdateTenantDataSyncJob");
            }


            EdGraph.Datasync.Client.Client.RequestOptions localVarRequestOptions = new EdGraph.Datasync.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EdGraph.Datasync.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdGraph.Datasync.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenantId", EdGraph.Datasync.Client.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            localVarRequestOptions.PathParameters.Add("jobId", EdGraph.Datasync.Client.Client.ClientUtils.ParameterToString(jobId)); // path parameter
            if (apiVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.Datasync.Client.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));
            }
            if (xVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-version", EdGraph.Datasync.Client.Client.ClientUtils.ParameterToString(xVersion)); // header parameter
            }
            localVarRequestOptions.Data = dataSyncApiJobV1UpdateJobRequest;

            localVarRequestOptions.Operation = "JobsApi.UpdateTenantDataSyncJob";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/tenants/{tenantId}/datasync/jobs/{jobId}/update", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateTenantDataSyncJob", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
